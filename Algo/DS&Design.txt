http://codereview.stackexchange.com/questions/55384/stack-with-getmiddle-and-deletemiddle-operation
http://blog.csdn.net/morewindows/article/details/6709644


1. Mini Parser
stack, cur, l,r(双指针)   ［ ］，

2. Design Twitter
	http://bookshadow.com/weblog/2016/06/11/leetcode-design-twitter/
	http://blog.csdn.net/mebiuw/article/details/51781415
	Map + Set + PriorityQueue
推文计数器
推文－id
推文id－用户id
用户id－关注（Set）［follow upfollow］
发推－更新count，维护twitterIdMap
用户id－推文


获取最难
获取推文推送 getNewsFeed：自己也加进去，全部选前10（max），然后排序选10个
或者用堆，每个挑一条最新的，加入，弹出最新的id，加入



3. topK元素设计
=============================================================================
3.
class Solution1 {
    public List<Integer> topKFrequent(int[] nums, int k) {
	
	// index是频率，的list
	List<Integer>[] bucket = new List[nums.length + 1];
	Map<Integer, Integer> frequencyMap = new HashMap<Integer, Integer>();
	// 计每个数的频率
	for (int n : nums) {
	    // hashmap新玩法
		frequencyMap.put(n, frequencyMap.getOrDefault(n, 0) + 1);
	}
    	// keySet(),  对应频率把key加上去
	for (int key : frequencyMap.keySet()) {
		int frequency = frequencyMap.get(key);
		if (bucket[frequency] == null) {
			bucket[frequency] = new ArrayList<>();
		}
		bucket[frequency].add(key);
	}
	
	List<Integer> res = new ArrayList<>();
   	// 倒着取，遇到不null的 addAll 到0或者直到size>k
	for (int pos = bucket.length - 1; pos >= 0 && res.size() < k; pos--) {
		if (bucket[pos] != null) {
			//
			res.addAll(bucket[pos]);
		}
	}
	return res;
}
}

public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
           
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
                         new PriorityQueue<>((a,b)->(b.getValue()-a.getValue()));
        for(Map.Entry<Integer,Integer> entry: map.entrySet()){
            maxHeap.add(entry);
        }
        
        List<Integer> res = new ArrayList<>();
        while(res.size()<k){
            Map.Entry<Integer, Integer> entry = maxHeap.poll();
            res.add(entry.getKey());
        }
        return res;
    }
}





public class Solution {
    public NestedInteger deserialize(String s) {
    if (s.isEmpty())
        return null;
    // 错误，直接返回    
    if (s.charAt(0) != '[') // ERROR: special case
        return new NestedInteger(Integer.valueOf(s));
    // 一个装NestedInteger的stack   
    Stack<NestedInteger> stack = new Stack<>();
    // 现在正在处理的元素
    NestedInteger curr = null;
    // 双指针l和r
    int l = 0; // l shall point to the start of a number substring; 
             
    for (int r = 0; r < s.length(); r++) {
        // 当前点
        char ch = s.charAt(r);
        // ［ 把上一个push进去，开新一个，l直接跳到r＋1
        if (ch == '[') {
            // 第一个［前面是空，所以cur不能为空
            if (curr != null) {
                stack.push(curr);
            }
            curr = new NestedInteger();
            l = r+1;
        } else if (ch == ']') {
            // 取l到r，不空的话，［］之间有内容
            String num = s.substring(l, r);
            if (!num.isEmpty())
                cur加进去
                curr.add(new NestedInteger(Integer.valueOf(num)));
            //栈不空的话，cur加到pop出来的NestedInteger，pop出来的成为cur，l直接跳到r＋1  
            if (!stack.isEmpty()) {
                NestedInteger pop = stack.pop();
                pop.add(curr);
                curr = pop;
            }
            l = r+1;
        } else if (ch == ',') {
            // 逗号，前一个不是］，有单纯的数字内容，加进去cur，l直接跳到r＋1
            if (s.charAt(r-1) != ']') {
                String num = s.substring(l, r);
                curr.add(new NestedInteger(Integer.valueOf(num)));
            }
            l = r+1;
        }
    }
    
    return curr;
}
}

4. Stack与括号
// 验证是否符合条件， Stack， 如果是三种中的一种括号，直接push
// 遇到闭括号， 那么就直接peek，如果符合即弹出，否则直接return false
public class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for(Character c : s.toCharArray()){
           if("({[".contains(String.valueOf(c))){
            stack.push(c);
          }else{
              if(!stack.isEmpty()&&isMatched(stack.peek(),c)){
                  stack.pop();
              }else{
                  return false;
              }
          }  
        }
        return stack.isEmpty();
    }
    private boolean isMatched(char c1,char c2){
        return (c1=='('&&c2==')')||(c1=='{'&&c2=='}')||(c1=='['&&c2==']');
    }
}

5. 最长的满足条件的括号串
//存的是index，
（ 直接存，
），如果empty，直接重置起始位置
不空，匹配弹出，然后更新最大值，从stack.peek()之后开始算

public class Solution {
public int longestValidParentheses(String s) {
    Stack<Integer> stack = new Stack<Integer>();
    int max = 0;
    int left = -1;
    for(int j = 0;j < s.length();j++){
        if(s.charAt(j) == '(') stack.push(j);            
        else {
            //now a new (, and the stack is empty, then reset left(start)
            if (stack.isEmpty()) left=j;
            else{
                // match a pair 
                stack.pop();
                // empty, then j - left, 
                if(stack.isEmpty()) max=Math.max(max,j-left);
                else max=Math.max(max,j-stack.peek());
               }
            }
        }
    return max;
}
}
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Google Tag1
4. DataStruc,HashTable(Design)
	A. hashmap与其他数据结构结合的用法 
		hashmap定义好，［int int 或者 int linkedlist等等］
		a.EntrySet()放入heap，或者list做初始化
	            Map.Entry<String, String>
		Collections.sort（list，new Comparator《》）o1.getValue() o1.getKey()

		放入heap的话heap 初始化（new comparator）再addAll(map.entrySet())
	B. 最大堆，自己new comparator，前面加个size
	1. 找频率为top10的domain，
		我用了hashmap 记录<domianName, frequency> 然后经过提示 排序fre的时候  再用一个hashmap 存<fre, linkedlist<domainName>>。collection.sort(list,com)
	2. 第K大的数［最小堆，弹出的是最小的］先加，if超过了，再poll
	3. 消息打印
	 id，时间，是否结束 ［delay有一分钟，所以1min钟内，按heap，endtime排］
	否则，直接hashmap，然后接收到结束message直接打印就好了吧
	4. 源iterator有null，现在改造它使得它不存在
		一样缓存E， next的话把E清空返回，hasNext（E空不空），whilehasNext，直到不是		null的话赋给E，
	5. 电话本（phone directory）
		smallestFreeIndex = bitset.nextClearBit(smallestFreeIndex);
		get｛bitset.set(smallestFreeIndex);，再找nextClearBit｝
		check（bitset.get(smallestFreeIndex)）
		release｛bitset.clear(number);，如果小于smallest，赋给它｝
		   BitSet bitset;
 		   int smallestFreeIndex; 
	6. 一堆安排，最少需要几个房间
		先按start sort，再新建一个按end的最小堆
		先放0， 从1遍历时 poll出来，如果现在开始大于上次结束，不需要，合并
		否则加入，最后poll出来的再放进去（无论merge与否） 返回堆的size
	
	7. sliding window［存index］不是aver，是max类似单调栈
	8.design tic[ 每行没列有多少1，－1]
	9. bomb
    	// 每个点遍历一遍更新全局求最大值，先算行，再算列
    	// row为什么一个，因为j == 0必然算一次，之后有墙再更新
   	 // col则需要存储每一个值，先行再列，列里每个j都要算一次，但是只有一个i
	10。http://www.1point3acres.com/bbs/thread-198570-1-1.html
		put(a, good, 1) 三元组，定范围
	第二题就是hash + binary serach, 用unordered_map<string,vector<pair<int,string>>> 来存，每次通过hash找历史记录，在历史记录上binary search lower_bound就行
或者单独heap，或者一个key一个heap？ 或者a＋good， heap
	11. 股票时间戳，算均值，数学问题？
	12. 四向交通系统， 
	4 个 queue，  然后把 front 放到一个 size 只有 4 的 main queue 里， 只能放 front， pop 一个 ，it+1， 再放回main queue 队尾
	http://www.1point3acres.com/bbs/thread-199004-1-1.html
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
GoogleTag2
Design
	流式数据专题
		2. 累加数据average，设定窗口
			循环数组指针，定长，－insert ＋val  赋值

	3. Stack－－－Nested

	定长数组，取模做循环队列
	17. Log Rater Limiter	
		1. 如果某个消息不再哈希表表，我们建立其和时间戳的映射，并返回true。		2. 如果应经在哈希表里了，我们看当前时间戳是否比哈希表中保存的时间戳大10，如果是，更新哈希表，并返回true，反之返回false
	18. Design Hit Counter
		下面这种方法就比较巧妙了，定义了两个大小为300的一维数组times和hits，分别用来保存时间戳和点击数，在点击函数中，将时间戳对300取余，然后看此位置中之前保存的时间戳和当前的时间戳是否一样，一样说明是同一个时间戳，那么对应的点击数自增1，如果不一样，说明已经过了五分钟了，那么将对应的点击数重置为1。那么在返回点击数时，我们需要遍历times数组，找出所有在5分中内的位置，然后把hits中对应位置的点击数都加起来即可
	19. tic－toc（bingo？）
		只需要考虑横竖（数组）两条对角线｜｜这里没有判断和局？加个计数器
	
	21. 设计贪吃蛇
	我们需要一个一维数组来保存蛇身的位置，由于蛇移动的过程的蛇头向前走一步，蛇尾也跟着往前，中间的躯体还在原来的位置，所以移动的结果就是，蛇头变到新位置，去掉蛇尾的位置即可
	Set Deque共同确定身体   set先逻辑删除，deque再实际删除
	rowHead == food[foodIndex][0] && colHead == food[foodIndex][1]
	foodIndex++;
	
	23. Sliding Window。数组窗口里的最大数
	https://segmentfault.com/a/1190000003903509
	nlogn （priorityqueue） n
	PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());［最大要reverse］
http://my.oschina.net/kevinair/blog/191630
	Deque，前头后尾， 存index， 进来看头i－k超过则删除，把尾巴小于新数的都删掉，新数存尾
	我们可以保证队列里的元素是从头到尾降序的，由于队列里只有窗口内的数，所以他们其实就是窗口内第一大，第二大，第三大...的数
	28. 天际线，
	comparator可直接写在定义里if a[0] - a[1] else a[1] - b[1]
	遍历时，通过一个堆来得知当前图形的最高位置。堆顶是所有顶点中最高的点，只要这个点没被移出堆，说明这个最高的矩形还没结束。对于左顶点，我们将其加入堆中。对于右顶点，我们找出堆中其相应的左顶点，然后移出这个左顶点，同时也意味这这个矩形的结束。具体代码中，为了在排序后的顶点列表中区分左右顶点，左顶点的值是正数，而右顶点值则存的是负数。
	https://segmentfault.com/a/1190000003786782
	29. 一堆meeting room 最多需要多少个房间
	DS（HashTable， Stack， Heap，Iterator，Queue）
	7. Stack处理文件
		空格 对应文件层级 lev + 1 < stack.size()