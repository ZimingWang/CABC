下面引入P类问题的概念：如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于P问题
NP问题的另一个定义是，可以在多项式的时间里猜出一个解的问题。
http://www.matrix67.com/blog/archives/105


http://blog.csdn.net/livecoldsun/article/details/25247071
http://wiki.jikexueyuan.com/project/java-collection/linkedhashmap.html
https://leetcode.com/problems/longest-substring-without-repeating-characters/
https://leetcode.com/problems/string-to-integer-atoi/
http://javarevisited.blogspot.ca/2014/03/3-ways-to-find-first-non-repeated-character-String-programming-problem.html
http://blog.csdn.net/zdl1016/article/details/4676882
http://stackoverflow.com/questions/3691940/finding-the-median-value-of-an-array
http://stackoverflow.com/questions/10662013/finding-the-median-of-an-unsorted-array
==========================================================================================
2 missing 
https://segmentfault.com/a/1190000003488849
1.排序再二分找（时间复杂度）
2.期望数组和－实际数组和（溢出？）
3.核心思想就是遍历数组时，将每个元素，和以该元素为下标的元素进行置换，比如第一个元素是3，就将它置换到下标为3的地方，而原本下标为3的地方的元素就换到第一个来。如果换来的元素也是在正确的位置就检查下一个元素，否则继续交换
4.亦或0是自己，亦或1是0
public int missingNumbera(int[] nums) {

    int xor = 0, i = 0;
    for (i = 0; i < nums.length; i++) {
       xor ^= i ^ nums[i];
    }

    return xor ^ i;
kth missing
http://www.weiming.info/zhuti/JobHunting/32086937/
for标记法， for负的就加上，否则就恢复
1. 如果某数字m出现，则在原数组的第m个元素作标记。[]
标记的方式：该元素的值减去数组总长度（count）。这样被标记过的元素一定是负数
，并且可以恢复其原值(+count即可)
2. 时间优化，能用一重循环则不用二重循环。
3. 运算结束时，恢复原数组全部数据，保持原顺序。
4. 同时考虑到算有运算不会有整数溢出情况。
5. 正常项目当然不会这样写代码，都是那个空间O(1)要求的。
我运转了一下test case{ 1, 1}，我的代码没有数组越界呀？
在正式的面试中，一重循环O(n)，还是比二重循环O(n^2)有明显优势的。
private static List FindMissing(List input)
{
List missing = new List();
int count = input.Count;
for (int i = 0; i < count; i++)
{
int value = input[i];
if (value < 0)
value += count;
if (input[value] >= 0)
input[value] -= count;
}
for (int i = 0; i < input.Count; i++)
{
if (input[i] >= 0)
missing.Add(i);
else
input[i] += count;
}
return missing;
}
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
twosum系列
	exactly 1 solutions 故而不需要计入次数［map是为了记住index］
	1. 2 sum unsorted [] map的话一个for就行map.containsKey(target - numbers[i]) 返回一个
	2. 2 sum sorted  while(i < j){break;} if (v == ) else > <
	3. 只需要看有没有，故而［map是为了记住所含次数］map的遍历 entrySet entry.getK, getV
	    考虑i j 是同一个数的情况
	4. 3 sum
		i = 0,  lo i+1 high  
		为了处理重复元素
		 if (i == 0 || (i > 0 && num[i] != num[i-1]))｛all code｝［去重复结果］
		 内里大if（ 两个whilelo < hi lo == lo+1 滑动）［去重复］然后再low＋＋ high－－
		加一个通用的else else
	5. 两个for（i ＝ 0） j ＝ i＋1 两个数，low j＋1， high len － 1
	 ans.add(Arrays.asList(num[i], num[j], num[low], num[high]));
	6. 3sumcloset
	7. 3sum smaller   right －left 全局count
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
数组的操作型
	8. range addition
	那么我们的做法就是在开头坐标startIndex位置加上inc，而在结束位置加1的地方加上-inc，那么根据题目中的例子，我们可以得到一个数组，nums = {-2, 2, 3, 2, -2, -3}，然后我们发现对其做累加和就是我们要求的结果result = {-2, 0, 3, 5, 3}，
	9.insert delete random O（1）
		ArrayList<Integer> nums;［目标］
    		HashMap<Integer, Integer> locs;［位置］
   		 java.util.Random rand = new java.util.Random();
	   删除时与最后一个数换一下再删除［list，hashmap均要改］
	10. insert delete random O（1） duplicated allowed
		HashMap<Integer, TreeSet> locs;［位置］
		traeste存的是list的长度
		idxSet.add(dataList.size());
       		 dataList.add(val);
        		return idxSet.size() == 1;

		int idx = idxSet.pollLast(); //Last index of val
        int tail = dataList.get(dataList.size() - 1); //Tail of list
        TreeSet<Integer> tailIdxSet = dataMap.get(tail);
        if (tail != val) {
            tailIdxSet.pollLast(); //Remove last idx of list tail
            tailIdxSet.add(idx); //Add idx to tail idx set
            dataList.set(idx, tail);
        }
	11. rotate 数组
		先全reverse，再reverse分界点的两半
	12. 旋转数组相乘
	把元素值用a,b,c,d 表示，看规律
	F(i) = F(i-1) + sum - n*A[n-i]
	http://www.cnblogs.com/grandyang/p/5869791.html
	
	13. 一堆数组成最大的数，
	排序思路：对于两个备选数字a和b，如果str(a) + str(b) > str(b) + str(a)，则a在b之前，否则b在a之	前
	integer转成字符串数组
	写comparator比较
	Arrays.sort
	append toString
	特殊情况：
		if(s_num[0].charAt(0) == '0')
                    return "0";
	14.数组是不是additive number
	先定前两个数，之后可以一直往前面做

	15.removek位，组成最小的数， while（） 前一个大于现在［remove］，k次，top》0，最后取有效部分
	16.［数组长度为1的时候］majority element[快排，一定是中间值][主要元素，一个候选＋对应次数]
	17.［数组长度为1的时候］majority elementII[两个候选＋次数，]
	    先初始一个，遍历［同时加，同时减］［减到0换主］，最后再一个for统计两者出现次数，超过3分之1就返回
==========================================================================================	 
==========================================================================================
17.
public List<Integer> majorityElement(int[] nums) {
        // 1, 2
        List<Integer> res = new ArrayList<>();
        if(nums == null || nums.length == 0) return res;
        if(nums.length == 1) {
            res.add(nums[0]);
            return res;
        }
        
        int m1 = nums[0];
        int m2 = 0;
        
        int c1 = 1;
        int c2 = 0;
        
        for(int i=1; i<nums.length; i++) {
            int x = nums[i];
            if(x==m1) ++c1;
            else if(x==m2) ++c2;
            else if(c1==0) {
                m1 = x;
                c1 = 1;
            } else if(c2==0) {
                m2 = x;
                c2 = 1;
            } else {
                --c1; --c2;
            }
        }
        c1 = 0; c2 = 0;
        for(int i=0; i<nums.length; i++) {
            if(m1 == nums[i]) ++c1;
            else if(m2 == nums[i]) ++c2;
        }
        if(c1>nums.length/3) res.add(m1);
        if(c2>nums.length/3) res.add(m2);
        return res;
    }


16.
public class Solution {
    public int majorityElement(int[] nums) {
         //  先初始化为1 
         int majority = nums[0];
         int counter=1;
         for(int i = 1;i < nums.length;i++){
             // 等于主要的元素＋＋
             if(nums[i] == majority){
                 counter++;
             }else{
                 // counter现在为0则重置
                 if(counter == 0){
                     majority = nums[i];
                     counter++;
                 }else{
                     // 否则－－
                     counter--;
                 }
                 
             }
         }
         return majority;
    }
}

15.
public class Solution {
    public String removeKdigits(String num, int k) {
        // 应该剩下多少数字
        int digits = num.length() - k;
        char[] stk = new char[num.length()];
        int top = 0;
        // k keeps track of how many characters we can remove
        // 前一个大于现在［remove］
        // if the previous character in stk is larger than the current one
        // then removing it will get a smaller number
        // but we can only do so when k is larger than 0
        for (int i = 0; i < num.length(); ++i) {
            char c = num.charAt(i);
            // top>0保证k计数器要大于k，while保证top－1，
            while (top > 0 && stk[top-1] > c && k > 0) {
                top -= 1;
                k -= 1;
            }
            stk[top++] = c;
        }
        // 去除多余的0, 还有并没有digits长，去空的长度
        int idx = 0;
        while (idx < digits && stk[idx] == '0') idx++;
        return idx == digits? "0": new String(stk, idx, digits - idx);
    }
}

14.
import java.math.BigInteger;

public class Solution {
    public boolean isAdditiveNumber(String num) {
        int n = num.length();
        // 第一个数可能截至的位置不可能到n/2
        for (int i = 1; i <= n / 2; ++i) {
	    // 数组以0开头，并且不止一位（0本身可以），返回false
            if (num.charAt(0) == '0' && i > 1) return false;
	    // 第一个数，
            BigInteger x1 = new BigInteger(num.substring(0, i));
            for (int j = 1; Math.max(j, i) <= n - i - j; ++j) {
		// 从i开始数组以0开头，并且不止一位（0本身可以），返回false
                if (num.charAt(i) == '0' && j > 1) break;
		// 第二个数
                BigInteger x2 = new BigInteger(num.substring(i, i + j));
                if (isValid(x1, x2, j + i, num)) return true;
            }
        }
        return false;
    }
    private boolean isValid(BigInteger x1, BigInteger x2, int start, String num) {
        if (start == num.length()) return true;
	//x2，x1更新
        x2 = x2.add(x1);
        x1 = x2.subtract(x1);
        String sum = x2.toString();
	//加起来之后，有没有匹配的前缀
        return num.startsWith(sum, start) && isValid(x1, x2, start + sum.length(), num);
    }
}



13.
public class Solution {
     public String largestNumber(int[] num) {
		if(num == null || num.length == 0)
		    return "";
		
		// Convert int array to String array, so we can sort later on
		String[] s_num = new String[num.length];
		for(int i = 0; i < num.length; i++)
		    s_num[i] = String.valueOf(num[i]);
			
		// Comparator to decide which string should come first in concatenation
		Comparator<String> comp = new Comparator<String>(){
		    @Override
		    public int compare(String str1, String str2){
		        String s1 = str1 + str2;
			String s2 = str2 + str1;
			return s2.compareTo(s1); // reverse order here, so we can do append() later
		    }
	        };
		
		Arrays.sort(s_num, comp);
                // An extreme edge case by lc, say you have only a bunch of 0 in your int array
                if(s_num[0].charAt(0) == '0')
                    return "0";
            
		StringBuilder sb = new StringBuilder();
		for(String s: s_num)
	            sb.append(s);
		
		return sb.toString();
		
	}
}


1. 
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
    int[] result = new int[2];
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int i = 0; i < numbers.length; i++) {
        if (map.containsKey(target - numbers[i])) {
            result[1] = i + 1;
            result[0] = map.get(target - numbers[i]);//从低到高，剩了判断谁先谁后，并且前面判断过，后面不可能再判断
            return result;
        }
        map.put(numbers[i], i + 1);//index要加1
    }
    return result;
}
}

2.
public class Solution {
    public int[] twoSum(int[] num, int target) {
    int[] indice = new int[2];
    if (num == null || num.length < 2) return indice;
    int left = 0, right = num.length - 1;
    while (left < right) {
        int v = num[left] + num[right];
        if (v == target) {
            indice[0] = left + 1;
            indice[1] = right + 1;
            break;
        } else if (v > target) {
            right --;
        } else {
            left ++;
        }
    }
    return indice;
}
}

3.
public class TwoSum {
    private HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

    public void add(int number) {
        map.put(number, map.containsKey(number) ? map.get(number) + 1 : 1);
    }

    public boolean find(int value) {
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int i = entry.getKey();
            int j = value - i;
            if ((i == j && entry.getValue() > 1) || (i != j && map.containsKey(j))) {
                return true;
            }
        }
        return false;
    }
}


4. 
public class Solution {
   public List<List<Integer>> threeSum(int[] num) {
    Arrays.sort(num);
    List<List<Integer>> res = new LinkedList<>(); 
    for (int i = 0; i < num.length-1; i++) {
        if (i == 0 || (i > 0 && num[i] != num[i-1])) {
            int lo = i+1, hi = num.length-1, sum = 0 - num[i];
            while (lo < hi) {
                if (num[lo] + num[hi] == sum) {
                    res.add(Arrays.asList(num[i], num[lo], num[hi]));
                    while (lo < hi && num[lo] == num[lo+1]) lo++;
                    while (lo < hi && num[hi] == num[hi-1]) hi--;
                    lo++; hi--;
                } else if (num[lo] + num[hi] < sum) lo++;
                else hi--;
           }
        }
    }
    return res;
}
}


5.
public class Solution {
    public List<List<Integer>> fourSum(int[] num, int target) {
        ArrayList<List<Integer>> ans = new ArrayList<>();
        if(num.length<4)return ans;
        Arrays.sort(num);
        
        for(int i=0; i<num.length-3; i++){
            if(i > 0 && num[i] == num[i-1]) continue;//防止重复
            for(int j=i+1; j<num.length-2; j++){
                if(j>i+1&&num[j]==num[j-1])continue;//两两配对的写法，同样防止重复
                int low=j+1, high=num.length-1;
                while(low<high){
                    int sum=num[i]+num[j]+num[low]+num[high];
                    if(sum==target){
                        ans.add(Arrays.asList(num[i], num[j], num[low], num[high]));
                        while(low<high&&num[low]==num[low+1])low++;
                        while(low<high&&num[high]==num[high-1])high--;//防止重复
                        low++;
                        high--;
                    }
                    else if(sum<target)low++;
                    else high--;//模版三个判断，相同，小于，大于
                }
            }
        }
        return ans;
    }
}
6.
public class Solution {
    // int result = num[0] + num[1] + num[num.length - 1];//先定一个标准
    // sum 和 target －－－－－ 更新这个标准 （abs相差）

    public int threeSumClosest(int[] num, int target) {
        int result = num[0] + num[1] + num[num.length - 1];//先定一个标准
        Arrays.sort(num);
        for (int i = 0; i < num.length - 2; i++) {
            int start = i + 1, end = num.length - 1;
            while (start < end) {
                int sum = num[i] + num[start] + num[end];
                if (sum > target) {
                    end--;
                } else {
                    start++;
                }
                //模版后正常加一个判断
                if (Math.abs(sum - target) < Math.abs(result - target)) {
                    result = sum;
                }
            }
        }
        return result;
    }
}
7.
public class Solution {
    int count;

    public int threeSumSmaller(int[] nums, int target) {
        count = 0;
        Arrays.sort(nums);
        int len = nums.length;

        for(int i=0; i<len-2; i++) {
            int left = i+1, right = len-1;
            while(left < right) {
                if(nums[i] + nums[left] + nums[right] < target) {
                    count += right-left;
                    left++;
                } else {
                    right--;
                }
            }
        }

        return count;
    }
}
8.
public class Solution {
   public int[] getModifiedArray(int length, int[][] updates) {

    int[] res = new int[length];
     for(int[] update : updates) {
        int value = update[2];
        int start = update[0];
        int end = update[1];
        
        res[start] += value;
        
        if(end < length - 1)
            res[end + 1] -= value;
        
    }
    
    int sum = 0;
    for(int i = 0; i < length; i++) {
        sum += res[i];
        res[i] = sum;
    }
    
    return res;
}
}
9.
public class RandomizedSet {
    ArrayList<Integer> nums;
    HashMap<Integer, Integer> locs;
    java.util.Random rand = new java.util.Random();
    /** Initialize your data structure here. */
    public RandomizedSet() {
        nums = new ArrayList<Integer>();
        locs = new HashMap<Integer, Integer>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        boolean contain = locs.containsKey(val);
        if ( contain ) return false;
        locs.put( val, nums.size());
        nums.add(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        boolean contain = locs.containsKey(val);
        if ( ! contain ) return false;
        int loc = locs.get(val);
        if (loc < nums.size() - 1 ) { // not the last one than swap the last one with this val
            int lastone = nums.get(nums.size() - 1 );
            nums.set( loc , lastone );
            locs.put(lastone, loc);
        }
        locs.remove(val);
        nums.remove(nums.size() - 1);
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        return nums.get(rand.nextInt(nums.size()) );
    }
}
10.
public class RandomizedCollection {

    ArrayList<Integer> result;
    HashMap<Integer, LinkedHashSet<Integer>> map;
    
    public RandomizedCollection() {
        result = new ArrayList<Integer>();
        map = new HashMap<Integer, LinkedHashSet<Integer>>();
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    public boolean insert(int val) {
        // Add item to map if it doesn't already exist.
        boolean alreadyExists = map.containsKey(val);
        if(!alreadyExists) {
            map.put(val, new LinkedHashSet<Integer>());
        }
        map.get(val).add(result.size());
        result.add(val);
        return !alreadyExists;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    public boolean remove(int val) {
        if(!map.containsKey(val)) {
            return false;
        }
        // Get arbitary index of the ArrayList that contains val
        LinkedHashSet<Integer> valSet = map.get(val);
        int indexToReplace = valSet.iterator().next();
        
        // Obtain the set of the number in the last place of the ArrayList
        int numAtLastPlace = result.get(result.size() - 1);
        LinkedHashSet<Integer> replaceWith = map.get(numAtLastPlace);
        
        // Replace val at arbitary index with very last number
        result.set(indexToReplace, numAtLastPlace);
        
        // Remove appropriate index
        valSet.remove(indexToReplace);
        
        // Don't change set if we were replacing the removed item with the same number
        if(indexToReplace != result.size() - 1) {
            replaceWith.remove(result.size() - 1);
            replaceWith.add(indexToReplace);
        }
        result.remove(result.size() - 1);
        
        // Remove map entry if set is now empty, then return
        if(valSet.isEmpty()) {
            map.remove(val);
        }
        return true;
    }
    
    /** Get a random element from the collection. */
    public int getRandom() {
        // Get linearly random item
        return result.get((int)(Math.random() * result.size()));
    }
}

12.
public class Solution {

	public int maxRotateFunction(int[] A) {
		int n = A.length;
		int sum = 0;
		int candidate = 0;

		for (int i = 0; i < n; i++) {
			sum += A[i];
			candidate += A[i] * i;
		}
		int best = candidate;

		for (int i = n - 1; i > 0; i--) {
			candidate = candidate + sum - A[i] * n;
			best = Math.max(best, candidate);
		}
		return best;
	}
}
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
8. Array［把matrix分出来］
	1. 两个排序数组中位数（第k大的数）
		两个数组中位数 O(log (m+n)) len ＝ a.len ＋ b.len 奇偶， mid/2 + 1 与 mid／2
	    a搜完直接返回b，b搜完返回a  k == 1 返回小的那个，mid是左边一半结尾不包含中位数 K／		2 －1，
	    两个start＋mid 首先不要越界，比大小，输的切一半，还可以切的切一半
	    ［1.找完的话直接在对方数组返回，2.K＝＝1直接返回小，3.否则K/2大小，谁输谁切一半］
	2. insert interval
		// 在interval start之前的加入
		//  merge起来  // new一个两个合起来最小的最大的,最后加入
		// 加完之后把其余的加入
	3. missing number(或（i ^ nums[i]），等差求和（太大）， xor ^= i ^ nums[i]，
				 二分（排序）， )
	4. missing k number
		如果某数字m出现，则在原数组的第m个元素作标记。
		标记的方式：该元素的值减去数组总长度（count）。这样被标记过的元素一定是负数
		，并且可以恢复其原值(+count即可)
	5. triplet increasing subsequrnce［i，j，k］递增
			三个if赋值
			small big（初始化最大），else true，
	6. find celebrity 候选人（谁都不认识，然后，谁都认识）	
	7. wiggle sort
		奇数位大于旁边偶数位（分奇偶位置，比较i与i － 1）
	8.wiggle sortII
		A.排序之后倒着取
	start在一半［一半前面一个元素］， end在最后一个元素前面（越界）
	新开的temp，i％2 分别--start， －－end
	再赋给原来数组
		B.快排O(n) time and/or in-place with O(1) extra space?最坏n2
	快排之后找到中位数，partition一下两边，然后再像上一种方法一样重组
	9.remove duplicate sorted array
		j = 0. i 从1开始， 如果相等，j＋＋把 A［i］付给A［j］ j++
		最后返回＋＋j（长度）
	［ksum专题］
	10. 3 sum smaller
	 	空出i， ［i+1， num.length - 1］ 双指针;count += right-left;
	11. 3 sum closet
		先定一个标准0+1+len－1，判断时比个abs更新
	12. 2sum sorted
	13. sort transofrmed（二元方程组，双指针（a大小决定））
	14. range addtion
		那么我们的做法就是在开头坐标startIndex位置加上inc，而在结束位置加1的地方加上-inc，那么根据题目中的例子，我们可以得到一个数组，nums = {-2, 2, 3, 2, -2, -3}，然后我们发现对其做累加和就是我们要求的结果result = {-2, 0, 3, 5, 3}
	15. missing range
		//上下确界，lo －hi，从lo开始，最后查一下hi
		// lo赋给next，小于等于时不构成range（continue）
		// 最后next 到hi检查一下
	16. 生成pascal 矩形
		for （0 － rows）for （）｛row.add(0, 1)｝
		从第二个，到倒数第二个，用set
	17. 生成pascal矩形第k行
		如上方法，生成后返回
	18. plus one，逆着遍历， ！＝9，＋＋直接return，否则设为0，全遍历完之后
		没return肯定是1000000
	19. 能否参加所有meeting，按start排序，Arrays.sort(a, new Com)
	       从1开始比较当前start是否小于上一个end
	20. merge interval, insert interval,
		prev, 前一个与后一个相交则合并，不相交则加入并成为prev
	21.  Given a list of numbers\n output a list of their relative ranks. For example: [10 3 8 9 4] => [1 5 3 2 4]
		先设一个class或者是hash map， 然后sort，或者hashmapentry存list再sort，然后照排位打出来。	
	22. Best Meeting（找出点，算距离，得最佳点）
		距离公式发现可以x，y分开算，于是变二维为两一维，双指针分别求距离和
	23. Bucket Sort 或者
		满足double数组中，a，a+1最长序列
		如果没有sorted
		第二题桶排序吧。。找到min 找到max， 桶是[min,max+1]个integer。 然后		扔进去数一下就好了
		否则，双指针，全局变量更新
	24.给一个array，按顺序输出发生重复的元素。举例：[1, 2, 3, 1, 1, 2, 4]，输出1和2。（一个map纪录次数或者Set（不能保证后面不会重复出现，map只打次数为2的时候））
	25. 一个变换数组，如何逆变换 http://www.gjczz.com/p/wXghtLoS/wen-ge-gou-jia-mian-shi-ti/
	26. spiral生成
	27. spiral遍历一样
	while里四个for，rowStart rowEnd，colStart colEnd，不断更新
	28.matrix怎么看斜对角线元素相等，2*n －1 行对角线？
		Follow up 1, 如果矩阵很大不能完整读到memory中，但是可以读至少一行怎么办？［先处理上三角， 1234， 123，12，1］
Follow up 2, 如果连一整行都读不到memory中怎么办，只能partially的读入一行的一部分怎么办？
	29.对角打印矩阵
	30.https://leetcode.com/problems/longest-consecutive-sequence/
	排序或者hash
	31.
	moving average
	32. 给定一个数组nums和一个数n，求添加最少的数使得[1,n]中的每个数都可以由数组中元素和组成patch array
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Google Tag2
Array［重］（Two pointer，Sort， Math）
	 5.patch arrayhttp://www.cnblogs.com/grandyang/p/5165821.html
	看covered ＋ 1在不在，不在＋covered＋1
	https://www.hrwhisper.me/leetcode-patching-array/

	6. count of range sum （区间段和在range里的有多少个）［对sum数组做merge sort ］
	http://www.cnblogs.com/grandyang/p/5162678.html
		引出： 求 substring，suarray的sum，一般求法（双指针做pair ＋ 前缀和数组）
		mergeSort解法： 求逆序数时候也用到了，先假设两个好了，然后看情况
		我们再来看一种方法，这种方法的思路和前一种一样，只是没有STL的		multiset和lower_bound和upper_bound函数，而是使用了Merge Sort来解，		在混合的过程中，我们已经给左半边[start, mid) 和右半边 [mid, end) 排序了。当我们遍历左半边，对于每个i，我们需要在右半边找出k和j，使其满足：
j是第一个满足 sums[j] - sums[i] > upper 的下标
k是第一个满足 sums[k] - sums[i] >= lower 的下标 
那么在[lower, upper]之间的区间的个数是j - k，同时我们也需要另一个下标t，用来拷贝所有满足sums[t] < sums[i]到一个寄存器Cache中以完成混合排序的过程。(注意这里sums可能会整型溢出，我们使用长整型long long代替)。
把cache的拷贝到sums start，start，拷多少
System.arraycopy(cache, 0, sums, start, t - start);
		8. wiggle sort 
			分奇偶交换相邻的i 与 i － 1   ( > 才能保证之后 <= )
		 9.wiggle sort II
			https://www.hrwhisper.me/leetcode-wiggle-sort-ii/

	  24. merge interval
		3个while（i《 size）
		加前面的，不断new merge中间的，再加剩余的
	25. Array[变换数组之后还得排序] －－ 最简单，用个堆去存，再取出来（默认最小堆）
	27. 找k个组合pair最小，堆，先存所有nums[1]的，再更新nums［2］存下标
	(a,b)->a[0]+a[1]-b[0]-b[1] 比较两个pair，相加去减
	30. 矩阵里第K小
	堆存point，自定义一个， 先存一行进去， 然后heap遍历k次，每一次poll出存下一个元素进去
	或者二分
	Kth Smallest Element in a Sorted Matrix 两个二分，［首尾］ 值二分，拿到之后，for二分每一行统计大于的个数，与k做比较，注意跳出来之后的条件，然后定值的边界